/////                                                  \\\\\
///// Patch function: BG1_RND_ITM                      \\\\\
/////                                                  \\\\\

//Patch function that can be used to automatically assign correct dummy item name used to spawn random items using 2DA tables. Supported file formats: ARE, CRE, EFF, ITM, SPL, STO.
//src variable sets source platform for dummy item names used in that file: 0 (default, no need to assign) - BG1 / BG:EE / Tutu; 1 - BGT; 2 - EET
//Example usage:
/*
COPY ~somefile~ ~override~
  LPF BG1_RND_ITM INT_VAR src = 1 END
*/
DEFINE_PATCH_FUNCTION ~BG1_RND_ITM~
	INT_VAR
		src = 0 //source random item table names: 0 (default, no need to assign) - BG1 / BG:EE / Tutu; 1 - BGT; 2 - EET
	BEGIN
	READ_ASCII 0x0 "filetype" ELSE ~Ignoring 0 byte file~
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	//ARE patching                                                                                     //
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	PATCH_IF ("%filetype%" STRING_EQUAL_CASE "AREAV1.0") AND (SOURCE_SIZE > 0x11b) BEGIN
		////////
		//Actors
		////////
		READ_LONG 0x54 "actors_off"
		READ_SHORT 0x58 "actors_cnt"
		FOR (cnt=0; cnt<"%actors_cnt%"; cnt=cnt+1) BEGIN
			////////////////////////////////////
			//CRE structure (embedded CRE files)
			////////////////////////////////////
			READ_BYTE ("%actors_off%"+0x110*cnt+0x28) "actors_flags"
			PATCH_IF (~%actors_flags%~ BAND BIT0) BEGIN
			END ELSE BEGIN //CRE attached
				READ_LONG ("%actors_off%"+0x110*cnt+0x88) "actors_emb_off"
				PATCH_IF (actors_emb_off != 0) BEGIN
					///////
					//Items
					///////
					READ_LONG ("%actors_emb_off%"+0x2bc) "item_off"
					READ_SHORT ("%actors_emb_off%"+0x2c0) "item_cnt"
					FOR (cnt2=0; cnt2<"%item_cnt%"; cnt2=cnt2+1) BEGIN
						//0x0 ITM resref
						SET off = ("%actors_emb_off%"+"%item_off%"+0x14*cnt2) LPM BG1_RND_ITM_patch
					END
					/////////
					//Effects
					/////////
					READ_LONG ("%actors_emb_off%"+0x2c4) "fx_off"
					READ_LONG ("%actors_emb_off%"+0x2c8) "fx_cnt"
					READ_BYTE ("%actors_emb_off%"+0x33) "eff_ver"
					FOR (cnt2=0; cnt2<"%fx_cnt%"; cnt2=cnt2+1) BEGIN
						PATCH_IF (eff_ver = 0) BEGIN //EFF v1
							READ_SHORT ("%actors_emb_off%"+"%fx_off%"+0x30*cnt2) "fx_type"
							SET offset = ("%actors_emb_off%"+"%fx_off%"+0x30*cnt2+0x14)
						END ELSE BEGIN //EFF v2
							READ_LONG ("%actors_emb_off%"+"%fx_off%"+0x108*cnt2+0x8) "fx_type"
							SET offset = ("%actors_emb_off%"+"%fx_off%"+0x108*cnt2+0x28)
						END
						PATCH_IF ("%fx_type%" = 111) //Create Item in Magical Weapon Slot
						OR ("%fx_type%" = 112) //Remove Item
						OR ("%fx_type%" = 122) //Create Inventory Item
						OR ("%fx_type%" = 123) //Remove Inventory Item
						OR ("%fx_type%" = 143) //Create Item in Slot
						OR ("%fx_type%" = 180) //Cannot Use Item
						OR ("%fx_type%" = 255) //Create Inventory Item (days)
						BEGIN
							SET off = offset LPM BG1_RND_ITM_patch
						END
					END
				END
			END
		END
		////////////
		//Containers
		////////////
		READ_LONG 0x70 "contain_off"
		READ_SHORT 0x74 "contain_cnt"
		FOR (cnt=0; cnt<"%contain_cnt%"; cnt=cnt+1) BEGIN
			//0x78 key ITM resref
			SET off = ("%contain_off%"+0xc0*cnt+0x78) LPM BG1_RND_ITM_patch
		END
		/////////////////
		//Container Items
		/////////////////
		READ_LONG 0x78 "citem_off"
		READ_SHORT 0x76 "citem_cnt"
		FOR (cnt=0; cnt<"%citem_cnt%"; cnt=cnt+1) BEGIN
			//0x0 ITM resref
			SET off = ("%citem_off%"+0x14*cnt) LPM BG1_RND_ITM_patch
		END
		///////
		//Doors
		///////
		READ_LONG 0xa8 "door_off"
		READ_LONG 0xa4 "door_cnt"
		FOR (cnt=0; cnt<"%door_cnt%"; cnt=cnt+1) BEGIN
			//0x78 key ITM resref
			SET off = ("%door_off%"+0xc8*cnt+0x78) LPM BG1_RND_ITM_patch
		END
	END
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	//CRE patching                                                                                     //
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	PATCH_IF ("%filetype%" STRING_EQUAL_CASE "CRE V1.0") /*AND (SOURCE_SIZE > 0x2d3)*/ BEGIN
		//Checks whether a CRE file is well-formed or not, fixes some common bugs, and reports whether the CRE file is still broken or not.
		LPF ~FJ_CRE_VALIDITY~ RET vl=valid END
		PATCH_IF vl BEGIN
			///////
			//Items
			///////
			READ_LONG 0x2bc "item_off"
			READ_SHORT 0x2c0 "item_cnt"
			FOR (cnt=0; cnt<"%item_cnt%"; cnt=cnt+1) BEGIN
				//0x0 ITM resref
				SET off = ("%item_off%"+0x14*cnt) LPM BG1_RND_ITM_patch
			END
			/////////
			//Effects
			/////////
			READ_LONG 0x2c4 "fx_off"
			READ_LONG 0x2c8 "fx_cnt"
			FOR (cnt=0; cnt<"%fx_cnt%"; cnt=cnt+1) BEGIN
				READ_LONG ("%fx_off%"+0x108*cnt+0x8) "fx_type"
				PATCH_IF ("%fx_type%" = 111) //Create Item in Magical Weapon Slot
				OR ("%fx_type%" = 112) //Remove Item
				OR ("%fx_type%" = 122) //Create Inventory Item
				OR ("%fx_type%" = 123) //Remove Inventory Item
				OR ("%fx_type%" = 143) //Create Item in Slot
				OR ("%fx_type%" = 180) //Cannot Use Item
				OR ("%fx_type%" = 255) //Create Inventory Item (days)
				BEGIN
					SET off = ("%fx_off%"+0x108*cnt+0x28) LPM BG1_RND_ITM_patch
				END
			END
		END
	END
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	//EFF patching                                                                                     //
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	PATCH_IF ("%filetype%" STRING_EQUAL_CASE "EFF V2.0") BEGIN
		READ_SHORT 0x10 "fx_type"
		PATCH_IF ("%fx_type%" = 111) //Create Item in Magical Weapon Slot
		OR ("%fx_type%" = 112) //Remove Item
		OR ("%fx_type%" = 122) //Create Inventory Item
		OR ("%fx_type%" = 123) //Remove Inventory Item
		OR ("%fx_type%" = 143) //Create Item in Slot
		OR ("%fx_type%" = 180) //Cannot Use Item
		OR ("%fx_type%" = 255) //Create Inventory Item (days)
		BEGIN
			SET off = 0x30 LPM BG1_RND_ITM_patch
		END
	END
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	//ITM patching                                                                                     //
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	PATCH_IF ("%filetype%" STRING_EQUAL_CASE "ITM V1  ") AND (SOURCE_SIZE > 0x71) BEGIN
		//0x10 replacement ITM resref
		SET off = 0x10 LPM BG1_RND_ITM_patch
		/////////
		//Effects
		/////////
		READ_LONG 0x6a "fx_off"
		READ_SHORT 0x70 "fx_cnt"
		FOR (cnt=0; cnt<"%abil_cnt%"; cnt=cnt+1) BEGIN
			READ_SHORT ("%abil_off%"+0x38*cnt+0x1e) "fx_num"
			SET fx_cnt += fx_num //gauge the total number of effects by summing global effects and the effects of each ability
		END
		FOR (cnt=0; cnt<"%fx_cnt%"; cnt=cnt+1) BEGIN
			READ_SHORT ("%fx_off%"+0x30*cnt) "fx_type"
			PATCH_IF ("%fx_type%" = 111) //Create Item in Magical Weapon Slot
			OR ("%fx_type%" = 112) //Remove Item
			OR ("%fx_type%" = 122) //Create Inventory Item
			OR ("%fx_type%" = 123) //Remove Inventory Item
			OR ("%fx_type%" = 143) //Create Item in Slot
			OR ("%fx_type%" = 180) //Cannot Use Item
			OR ("%fx_type%" = 255) //Create Inventory Item (days)
			BEGIN
				SET off = ("%fx_off%"+0x30*cnt+0x14) LPM BG1_RND_ITM_patch
			END
		END
	END
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	//SPL patching                                                                                     //
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	PATCH_IF ("%filetype%" STRING_EQUAL_CASE "SPL V1  ") AND (SOURCE_SIZE > 0x71) BEGIN
		/////////
		//Effects
		/////////
		READ_LONG 0x6a "fx_off"
		READ_SHORT 0x70 "fx_cnt"
		FOR (cnt=0; cnt<"%abil_cnt%"; cnt=cnt+1) BEGIN
			READ_SHORT ("%abil_off%"+0x28*cnt+0x1e) "fx_num"
			SET fx_cnt += fx_num //gauge the total number of effects by summing global effects and the effects of each ability
		END
		FOR (cnt=0; cnt<"%fx_cnt%"; cnt=cnt+1) BEGIN
			READ_SHORT ("%fx_off%"+0x30*cnt) "fx_type"
			PATCH_IF ("%fx_type%" = 111) //Create Item in Magical Weapon Slot
			OR ("%fx_type%" = 112) //Remove Item
			OR ("%fx_type%" = 122) //Create Inventory Item
			OR ("%fx_type%" = 123) //Remove Inventory Item
			OR ("%fx_type%" = 143) //Create Item in Slot
			OR ("%fx_type%" = 180) //Cannot Use Item
			OR ("%fx_type%" = 255) //Create Inventory Item (days)
			BEGIN
				SET off = ("%fx_off%"+0x30*cnt+0x14) LPM BG1_RND_ITM_patch
			END
		END
	END
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	//STO patching                                                                                     //
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	PATCH_IF ("%filetype%" STRING_EQUAL_CASE "STORV1.0") AND (SOURCE_SIZE > 0x9b) BEGIN
		////////////////
		//Items for Sale
		////////////////
		READ_LONG 0x34 "item_off"
		READ_SHORT 0x38 "item_cnt"
		FOR (cnt=0; cnt<"%item_cnt%"; cnt=cnt+1) BEGIN
			//0x0 ITM resref
			SET off = ("%item_off%"+0x1c*cnt) LPM BG1_RND_ITM_patch
		END
	END
END

//part of the function call, don't use separately
DEFINE_PATCH_MACRO ~BG1_RND_ITM_patch~ BEGIN
	DEFINE_ASSOCIATIVE_ARRAY remapped_rnd_list BEGIN
		//EET      , BGT        => BG1 / BG:EE / Tutu
		"RNDEQU04" , "RNDEQU01" => "RNDEQU01" //RNDEQUIP.2DA - LOW
		"RNDEQU05" , "RNDEQU02" => "RNDEQU02" //RNDEQUIP.2DA - HIGH
		"RNDEQU06" , "RNDEQU03" => "RNDEQU03" //RNDEQUIP.2DA - POOP
		"RNDMAG03" , "RNDMAG03" => "RNDMAG01" //RNDMAGIC.2DA - LOW
		"RNDMAG04" , "RNDMAG04" => "RNDMAG02" //RNDMAGIC.2DA - HIGH
		"RNDMAG05" , "RNDMAG05" => "RNDMAG03" //RNDMAGIC.2DA - POOP
		"RNDSCR04" , "RNDSCR04" => "RNDSCR01" //RNDSCROL.2DA - 1st
		"RNDSCR05" , "RNDSCR05" => "RNDSCR02" //RNDSCROL.2DA - 2nd
		"RNDSCR06" , "RNDSCR06" => "RNDSCR03" //RNDSCROL.2DA - 3rd
		"RNDSCR07" , "RNDSCR07" => "RNDSCR04" //RNDSCROL.2DA - 4th
		"RNDMAG06" , "RNDMAG06" => "RNDTRE01" //RNDTREAS.2DA - POOR
		"RNDTRE06" , "RNDTRE06" => "RNDTRE02" //RNDTREAS.2DA - AVERAGE
		"RNDTRE07" , "RNDTRE07" => "RNDTRE03" //RNDTREAS.2DA - WELL_OFF
		"RNDTRE08" , "RNDTRE08" => "RNDTRE04" //RNDTREAS.2DA - WEALTHY
		"RNDTRE09" , "RNDTRE09" => "RNDTRE05" //RNDTREAS.2DA - RICH
		"RNDWEP04" , "RNDWEP01" => "RNDWEP01" //RNDWEP.2DA - 1st
		"RNDWEP05" , "RNDWEP02" => "RNDWEP02" //RNDWEP.2DA - 2nd
		"RNDWEP06" , "RNDWEP03" => "RNDWEP03" //RNDWEP.2DA - 3rd
		"SODTRE07" , "" => "RNDTRE07" //RNDTRES.2DA - RNDTRE07
		"SODTRE08" , "" => "RNDTRE08" //RNDTRES.2DA - RNDTRE08
		"SODTRE09" , "" => "RNDTRE09" //RNDTRES.2DA - RNDTRE09
	END
	CLEAR_ARRAY remapped_rnd
	PHP_EACH remapped_rnd_list AS var1 => var2 BEGIN
		PATCH_IF GAME_IS ~bg1 totsc bgee tutu tutu_totsc~ BEGIN
			PATCH_IF src = 1 BEGIN //BGT
				DEFINE_ASSOCIATIVE_ARRAY remapped_rnd BEGIN ~%var1_1%~ => ~%var2%~ END
			END ELSE PATCH_IF src = 2 BEGIN //EET
				DEFINE_ASSOCIATIVE_ARRAY remapped_rnd BEGIN ~%var1%~ => ~%var2%~ END
			END
		END ELSE PATCH_IF GAME_IS ~bgt~ BEGIN
			PATCH_IF src = 0 BEGIN //BG1 / BG:EE / Tutu
				DEFINE_ASSOCIATIVE_ARRAY remapped_rnd BEGIN ~%var2%~ => ~%var1_1%~ END
			END ELSE PATCH_IF src = 2 BEGIN //EET
				DEFINE_ASSOCIATIVE_ARRAY remapped_rnd BEGIN ~%var1%~ => ~%var1_1%~ END
			END
		END ELSE PATCH_IF GAME_IS ~eet~ BEGIN
			PATCH_IF src = 0 BEGIN //BG1 / BG:EE / Tutu
				DEFINE_ASSOCIATIVE_ARRAY remapped_rnd BEGIN ~%var2%~ => ~%var1%~ END
			END ELSE PATCH_IF src = 1 BEGIN //BGT
				DEFINE_ASSOCIATIVE_ARRAY remapped_rnd BEGIN ~%var1_1%~ => ~%var1%~ END
			END
		END
	END
	READ_ASCII off "source" (8) NULL
	TO_UPPER source
	PATCH_IF (NOT ~%source%~ STRING_EQUAL_CASE ~~) AND (VARIABLE_IS_SET $remapped_rnd(~%source%~)) BEGIN
		TEXT_SPRINT dest $remapped_rnd(~%source%~)
		WRITE_ASCIIE off "%dest%" #8
		SPRINT str ~Patching %SOURCE_FILESPEC%: itm = %source% => %dest% -~
		SPRINTF str ~%s %x~ ("%str%" off)
		PATCH_PRINT ~%str%~
	END
END

/////                                                  \\\\\
///// Action function: EET_IRON_CRISIS                 \\\\\
/////                                                  \\\\\

//Action function that can be used to automatically add item shattering effect to weapons, armors, shields and helmets. It removes BG:EE/Tutu/BGT item shattering implementation first if already present. SPL file created will have the exact same name as the item name. Example usage:
/*ACTION_DEFINE_ARRAY arrayName BEGIN ~weapon.itm~ ~modDir/armor.itm~ ~%var%/shield.itm~ END
LAF ~EET_IRON_CRISIS~
  STR_VAR
    shattering_array = EVAL ~arrayName~ //array with files to patch (supports: weapons, armors, shields, helmets)
END*/

DEFINE_ACTION_FUNCTION ~EET_IRON_CRISIS~
	STR_VAR
		shattering_array = ""
	BEGIN
	ACTION_IF (NOT GAME_IS ~eet bgee~) BEGIN
		PRINT ~Skipped EET_IRON_CRISIS patching (this function is only for BG:EE and EET)~
	END ELSE BEGIN
		ACTION_PHP_EACH "%shattering_array%" AS index => file BEGIN
			OUTER_PATCH_SAVE file ~%file%~ BEGIN
				REPLACE_TEXTUALLY ~\\~ ~/~
			END
			OUTER_PATCH_SAVE file_dir ~%file%~ BEGIN
				REPLACE_TEXTUALLY ~[^/]+$~ ~~
			END
			OUTER_PATCH_SAVE file_name ~%file%~ BEGIN
				REPLACE_TEXTUALLY ~^.+/\([^/]+\)$~ ~\1~
			END
			OUTER_PATCH_SAVE file_res ~%file_name%~ BEGIN
				REPLACE_TEXTUALLY ~\.[^/]+$~ ~~
			END
			OUTER_PATCH_SAVE file_ext ~%file%~ BEGIN
				REPLACE_TEXTUALLY ~^.+\.~ ~~
			END
			//PRINT ~file = %file%; file_dir = %file_dir%; file_name = %file_name%; file_res = %file_res%; file_ext = %file_ext%~
			ACTION_IF (~%file_dir%~ STRING_EQUAL_CASE ~~) BEGIN
				ACTION_IF (FILE_EXISTS_IN_GAME ~%file_name%~) BEGIN
					COPY_EXISTING ~%file_name%~ ~override~
						LPM ~EET_IRON_CRISIS_patch~
					BUT_ONLY
				END ELSE BEGIN
					WARN ~WARNING: %file_name% doesn't exist in game~
				END
			END ELSE BEGIN
				ACTION_IF (FILE_EXISTS ~%file%~) BEGIN
					COPY ~%file%~ ~%file%~
						LPM ~EET_IRON_CRISIS_patch~
					BUT_ONLY
				END ELSE BEGIN
					WARN ~WARNING: %file% not found~
				END
			END
			ACTION_IF (patched = 1) BEGIN
				ACTION_IF (NOT FILE_EXISTS_IN_GAME ~%SOURCE_FILE%~) BEGIN
					COPY_EXISTING ~SW2H1.SPL~ ~override/%SOURCE_RES%.SPL~
						WRITE_ASCII 0x10e "%item_broken%" #8
						WRITE_LONG 0x12e string
						WRITE_ASCII 0xde "%SOURCE_RES%" #8
				END ELSE BEGIN
					PRINT ~Skipping %SOURCE_RES%.SPL creation - already exists~
				END
			END
		END
	END
END

//part of the function call, don't use separately
DEFINE_PATCH_MACRO ~EET_IRON_CRISIS_patch~ BEGIN
	SET patched = 0
	READ_SHORT 0x1c "Item_type" ELSE 0
	PATCH_MATCH ~%Item_type%~ WITH
	// Weapons
	~5~ ~15~ ~16~ ~17~ ~18~ ~19~ ~20~ ~21~ ~22~ ~23~ ~24~ ~25~ ~26~ ~27~ ~28~ ~29~ ~30~ ~31~ ~44~ ~57~ ~69~ BEGIN
		PATCH_PRINT ~Patching %file%: weapon shattering effect~
		LPF DELETE_ITEM_EFFECT INT_VAR opcode_to_delete = 146 /*Cast Spell*/ END //BG:EE/Tutu/EET
		LPF DELETE_ITEM_EFFECT INT_VAR opcode_to_delete = 309 /*Set variable*/ END //BGT
		LPF ADD_ITEM_EFFECT INT_VAR opcode = 146 /*Cast Spell*/ target = 1 parameter1 = 1 parameter2 = 1 timing = 1 probability1 = 1 header = 1 type = 1 STR_VAR resource = EVAL "%SOURCE_RES%" END
		PATCH_IF (GAME_IS ~eet~) BEGIN
			SPRINT item_broken ~MISC56_~
		END ELSE BEGIN
			SPRINT item_broken ~MISC56~
		END
		SET string = 14158
		SET patched = 1
	END
	//Shields
	~12~ BEGIN
		PATCH_PRINT ~Patching %file%: shield shattering effect~
		LPF DELETE_ITEM_EQEFFECT INT_VAR opcode_to_delete = 232 /*Cast Spell on Condition*/ END //EET
		LPF DELETE_ITEM_EQEFFECT INT_VAR opcode_to_delete = 309 /*Set variable*/ END //BGT
		LPF ADD_ITEM_EQEFFECT INT_VAR opcode = 232 /*Cast Spell on Condition*/ target = 1 timing = 2 probability1 = 1 header = 1 STR_VAR resource = EVAL "%SOURCE_RES%" END
		SPRINT item_broken ~MISC57~
		SET string = 14180
		SET patched = 1
	END
	//Armors
	~2~ BEGIN
		PATCH_PRINT ~Patching %file%: armor shattering effect~
		LPF DELETE_ITEM_EQEFFECT INT_VAR opcode_to_delete = 232 /*Cast Spell on Condition*/ END //EET
		LPF DELETE_ITEM_EQEFFECT INT_VAR opcode_to_delete = 309 /*Set variable*/ END //BGT
		LPF ADD_ITEM_EQEFFECT INT_VAR opcode = 232 /*Cast Spell on Condition*/ target = 1 timing = 2 probability1 = 1 header = 1 STR_VAR resource = EVAL "%SOURCE_RES%" END
		SPRINT item_broken ~MISC58~
		SET string = 15817
		SET patched = 1
	END
	//Headgear
	~7~ BEGIN
		PATCH_PRINT ~Patching %file%: helmet shattering effect~
		LPF DELETE_ITEM_EQEFFECT INT_VAR opcode_to_delete = 232 /*Cast Spell on Condition*/ END //EET
		LPF DELETE_ITEM_EQEFFECT INT_VAR opcode_to_delete = 309 /*Set variable*/ END //BGT
		LPF ADD_ITEM_EQEFFECT INT_VAR opcode = 232 /*Cast Spell on Condition*/ target = 1 timing = 2 probability1 = 1 header = 1 STR_VAR resource = EVAL "%SOURCE_RES%" END
		SPRINT item_broken ~MISC59~
		SET string = 15818
		SET patched = 1
	END
	DEFAULT
		PATCH_WARN ~WARNING: %file% not patched. %Item_type% item type is not supported~
	END
END

/////                                                  \\\\\
///// Action function: EET_JOURNAL                     \\\\\
/////                                                  \\\\\

//Action function that can be used in mods to automatically patch all BG2/SoD files to use EET continuous journal system. Example usage:
/*ACTION_DEFINE_ARRAY arrayName BEGIN ~AERIE.bcs~ ~modDir/AERIE.d~ ~%var%/ALARM25.baf~ END
LAF ~EET_JOURNAL~
  INT_VAR
    journal_patch_mode = 1 //0 - replace with values; 1 - replace with variables (default = 0)
  STR_VAR
    journal_array = EVAL ~arrayName~ //array with files to patch (supports: d, dlg, baf, bcs, and any text file with code)
END*/

DEFINE_ACTION_FUNCTION ~EET_JOURNAL~
	INT_VAR
		journal_patch_mode = 0
		journal_add = 12
	STR_VAR
		journal_array = ""
	BEGIN
	ACTION_IF (NOT GAME_IS ~eet~) BEGIN
		PRINT ~Skipped EET_JOURNAL patching (this function is only for EET)~
	END ELSE BEGIN
		ACTION_IF (journal_patch_mode = 0) BEGIN //replace with values
			OUTER_SET journal_mode = 0
		END ELSE ACTION_IF (journal_patch_mode = 1) BEGIN //replace with variables
			OUTER_SET journal_mode = 1
		END ELSE BEGIN
			WARN ~WARNING: journal_patch_mode parameter unrecognized~
		END
		ACTION_PHP_EACH "%journal_array%" AS index => file BEGIN
			OUTER_PATCH_SAVE file ~%file%~ BEGIN
				REPLACE_TEXTUALLY ~\\~ ~/~
			END
			OUTER_PATCH_SAVE file_dir ~%file%~ BEGIN
				REPLACE_TEXTUALLY ~[^/]+$~ ~~
			END
			OUTER_PATCH_SAVE file_name ~%file%~ BEGIN
				REPLACE_TEXTUALLY ~^.+/\([^/]+\)$~ ~\1~
			END
			OUTER_PATCH_SAVE file_ext ~%file%~ BEGIN
				REPLACE_TEXTUALLY ~^.+\.~ ~~
			END
			//PRINT ~file = %file%; file_dir = %file_dir%; file_name = %file_name%; file_ext = %file_ext%~
			ACTION_IF (~%file_dir%~ STRING_EQUAL_CASE ~~) BEGIN
				ACTION_IF (FILE_EXISTS_IN_GAME ~%file_name%~) BEGIN
					COPY_EXISTING ~%file_name%~ ~override~
						LPM ~EET_JOURNAL_patch~
					BUT_ONLY
				END ELSE BEGIN
					WARN ~WARNING: %file_name% doesn't exist in game~
				END
			END ELSE BEGIN
				ACTION_IF (FILE_EXISTS ~%file%~) BEGIN
					COPY ~%file%~ ~%file%~
						LPM ~EET_JOURNAL_patch~
					BUT_ONLY
				END ELSE BEGIN
					WARN ~WARNING: %file% not found~
				END
			END
		END
	END
END

//part of the function call, don't use separately
DEFINE_PATCH_MACRO ~EET_JOURNAL_patch~ BEGIN
	PATCH_IF (~%file_ext%~ STRING_EQUAL_CASE ~bcs~) BEGIN
		DECOMPILE_BCS_TO_BAF
	END ELSE PATCH_IF (~%file_ext%~ STRING_EQUAL_CASE ~dlg~) BEGIN
		DECOMPILE_DLG_TO_D
	END
	REPLACE_TEXTUALLY ~IncrementGlobal~ ~IncrementReplaceMe~ //we don't want to patch this one
	SET patched = 0
	PATCH_IF (journal_mode = 0) OR (~%file_ext%~ STRING_EQUAL_CASE ~bcs~) OR (~%file_ext%~ STRING_EQUAL_CASE ~dlg~) BEGIN //replace with values
		REPLACE_EVALUATE CASE_INSENSITIVE ~\([A-Za-z]*G[A-Za-z]*("CHAPTER","GLOBAL",\)\([0-9]+\))~ BEGIN //this should take care of SetGlobal, Global, GlobalGT, GlobalLT, SG, G, GGT, GLT
			SET MATCH2_new = MATCH2 + journal_add
			PATCH_PRINT ~Patching %file%: %MATCH1%%MATCH2%) => %MATCH1%%MATCH2_new%)~
			SET patched = 1
		END
		~%MATCH1%%MATCH2_new%)~
	END ELSE BEGIN
		REPLACE_EVALUATE CASE_INSENSITIVE ~\([A-Za-z]*G[A-Za-z]*("CHAPTER","GLOBAL",\)\([0-9]+\))~ BEGIN //this should take care of SetGlobal, Global, GlobalGT, GlobalLT, SG, G, GGT, GLT
			PATCH_PRINT ~Patching %file%: %MATCH1%%MATCH2%) => %MATCH1%%bg2_chapter_%MATCH2%%)~
			SET patched = 1
		END
		~%MATCH1%%bg2_chapter_%MATCH2%%)~
	END
	PATCH_IF (patched = 0) BEGIN
		PATCH_WARN ~WARNING: %file% not patched. 0 chapter variable matches found~
	END
	REPLACE_TEXTUALLY ~IncrementReplaceMe~ ~IncrementGlobal~
	PATCH_IF (~%file_ext%~ STRING_EQUAL_CASE ~bcs~) BEGIN
		COMPILE_BAF_TO_BCS EVALUATE_BUFFER
	END ELSE PATCH_IF (~%file_ext%~ STRING_EQUAL_CASE ~dlg~) BEGIN
		COMPILE_D_TO_DLG EVALUATE_BUFFER
	END
END

/////                                                  \\\\\
///// Action function: EET_NPC_TRANSITION              \\\\\
/////                                                  \\\\\

//Action function that can be used in mods to automatically add EET NPC transition system. Example usage:
/*LAF ~EET_NPC_TRANSITION~
  INT_VAR
    type = 1
      //1 - BG1/SoD NPC without BG2 content (NPC is disabled from game after BG1, mentioned but not summonable in ToB)
      //2 - BG2 NPC without BG1 content (transition to ToB if joined the party at least once during SoA)
      //3 - NPC with BG1 and BG2 content (full transition to SoA/ToB)
    default_ToB = 0 //controls if NPC should be spawnable in ToB when the game has been started in ToB (no by default - 0)
    clean_ToB = 0 //cleans out existing EET code in FATESP.DLG, AR4000.BCS, AR4500.BCS for DV specified in clean_ToB_DV
  STR_VAR
    dv = "IMOEN2" //Death Variable (script name) of the NPC (must be the same in BG1/SoD/BG2/ToB)
    override_BG1 = "IMOEN_" //name of the override NPC script in BG1
    override_SoD = "BDIMOEN" //name of the override NPC script in SoD
    override_SoA = "IMOEN2" //name of the override NPC script in SoA
    override_ToB = "IMOEN25" //name of the override NPC script in ToB
    dialog_ToB = "IMOEN25A" //name of the dialogue file used after spawning NPC in ToB
    string = "@1" //FATESP summon text (example: "Bring me Quayle, the gnome cleric/illusionist.") or TRA string number
    stringPosDV = "" //set the DV of NPC right below your response (used for sorting FATESP responses alphabetically)
      //Aerie, Ajantis, Alora, Anomen, Baeloth, Branwen, Cernd, Coran, Corwin, Dorn, Dynaheir, Edwin, Eldoth, Faldorn, Garrick,
      //Glint, HaerDalis, Hexxat, Imoen2, Jaheira, Jan, Kagain, Keldorn, Khalid, Kivan, Korgan, MKhiin, Mazzy, Minsc, Montaron,
      //Nalia, Neera, Quayle, Rasaad, Safana, SharTeel, Skie, Tiax, Viconia, Valygar, Voghiln, Wilson, Xan, Xzar, Yeslick, Yoshimo
      //variable not set (default) = NPC name appended at the end of summoning list
    SummonedVar = "" //set it only if you want to use different var name than %dv%Summoned (useless in most cases)
    SpawnPlaneVar = "" //set it only if you want use different var name than %dv%SpawnPlane (useless in most cases)
    clean_ToB_DV = "" //if clean_ToB = 1 existing code for this DV will be removed from FATESP.DLG, AR4000.BCS, AR4500.BCS
END*/

DEFINE_ACTION_FUNCTION ~EET_NPC_TRANSITION~
	INT_VAR
		type = 0
		default_ToB = 0
		clean_ToB = 0
	STR_VAR
		dv = ""
		override_BG1 = ""
		override_SoD = ""
		override_SoA = ""
		override_ToB = ""
		dialog_ToB = ""
		string = ""
		stringPosDV = ""
		SummonedVar = ""
		SpawnPlaneVar = ""
		clean_ToB_DV = ""
	BEGIN
	//Check if all needed variables are set
	OUTER_SET skip = 0
	ACTION_IF (NOT GAME_IS ~eet~) BEGIN
		PRINT ~Skipped EET_NPC_TRANSITION patching (this function is only for EET)~
		OUTER_SET skip = 1
	END ELSE ACTION_IF (type = 1) BEGIN //BG1 NPC without BG2 content
		PRINT ~EET_NPC_TRANSITION patching for %dv%: BG1 NPC without BG2 content~
		ACTION_FOR_EACH var IN dv string BEGIN
			OUTER_SPRINT EVAL temp ~%var%~
			ACTION_IF (~%temp%~ STRING_EQUAL_CASE ~~) BEGIN
				WARN ~WARNING: EET_NPC_TRANSITION: "%var%" STR_VAR not set~
				OUTER_SET skip = 1
			END
		END
		ACTION_IF (~%override_BG1%~ STRING_EQUAL_CASE ~~) AND (~%override_SoD%~ STRING_EQUAL_CASE ~~) BEGIN
			WARN ~WARNING: EET_NPC_TRANSITION: "override_BG1 and override_SoD STR_VAR not set~
			OUTER_SET skip = 1
		END
		OUTER_SPRINT override_SoA ~~
	END ELSE ACTION_IF (type = 2) BEGIN //BG2 NPC without BG1 content
		PRINT ~EET_NPC_TRANSITION patching for %dv%: BG2 NPC without BG1 content~
		ACTION_FOR_EACH var IN dv override_SoA override_ToB dialog_ToB string BEGIN
			OUTER_SPRINT EVAL temp ~%var%~
			ACTION_IF (~%temp%~ STRING_EQUAL_CASE ~~) BEGIN
				WARN ~WARNING: EET_NPC_TRANSITION: "%var%" STR_VAR not set~
				OUTER_SET skip = 1
			END
		END
		OUTER_SPRINT override_BG1 ~~
		OUTER_SPRINT override_SoD ~~
	END ELSE ACTION_IF (type = 3) BEGIN //NPC with BG1 and BG2 content
		PRINT ~EET_NPC_TRANSITION patching for %dv%: NPC with BG1 and BG2 content~
		ACTION_FOR_EACH var IN dv are baf override_BG1 override_SoA override_ToB dialog_ToB string BEGIN
			OUTER_SPRINT EVAL temp ~%var%~
			ACTION_IF (~%temp%~ STRING_EQUAL_CASE ~~) BEGIN
				WARN ~WARNING: EET_NPC_TRANSITION: "%var%" STR_VAR not set~
				OUTER_SET skip = 1
			END
		END
	END ELSE BEGIN
		WARN ~WARNING: EET_NPC_TRANSITION: unexpected "type" INT_VAR value (%type%)~
		OUTER_SET skip = 1
	END

	ACTION_IF (skip = 0) BEGIN
		OUTER_SPRINT newline ~%WNL%%LNL%%MNL%%TAB% ~

		//Clean existing code in FATESP.DLG, AR4000.BCS and 45000.BCS
		ACTION_IF (clean_ToB = 1) BEGIN
			COPY_EXISTING ~AR4000.BCS~ ~override~
				DECOMPILE_AND_PATCH BEGIN
					REPLACE_TEXTUALLY ~IF[%newline%]*InPartyAllowDead("%clean_ToB_DV%")[%newline%]*Global("[^"]+","GLOBAL",0)[%newline%]*THEN[%newline%]*RESPONSE #100[%newline%]*ActionOverride("%clean_ToB_DV%",ChangeAIScript("[^"]+",OVERRIDE))[%newline%]*SetGlobal("[^"]+","GLOBAL",2)[%newline%]*END~ ~~
					REPLACE_TEXTUALLY ~IF[%newline%]*Global("[^"]+","GLOBAL",0)[%newline%]*BeenInParty("%dv%")[%newline%]*THEN[%newline%]*RESPONSE #100[%newline%]*SetGlobal("[^"]+","GLOBAL",2)[%newline%]*Continue()[%newline%]*END~ ~~
					REPLACE_TEXTUALLY ~SetGlobal("%clean_ToB_DV%PartyBG2","GLOBAL",1)~ ~~
				END
			BUT_ONLY
			COPY_EXISTING ~AR4500.BCS~ ~override~
				DECOMPILE_AND_PATCH BEGIN
					REPLACE_TEXTUALLY ~IF[%newline%]*InPartyAllowDead("%clean_ToB_DV%")[%newline%]*Global("[^"]+","GLOBAL",0)[%newline%]*THEN[%newline%]*RESPONSE #100[%newline%]*ActionOverride("%clean_ToB_DV%",ChangeAIScript("[^"]+",OVERRIDE))[%newline%]*SetGlobal("[^"]+","GLOBAL",2)[%newline%]*END~ ~~
					REPLACE_TEXTUALLY ~IF[%newline%]*Global("NEWGAME_TOB","GLOBAL",0)[%newline%]*Global("[^"]+","GLOBAL",1)[%newline%]*Global("[^"]+","GLOBAL",0)[%newline%]*THEN[%newline%]*RESPONSE #100[%newline%]*CreateVisualEffect("SPPORTAL",\[.+\])[%newline%]*Wait(2)[%newline%]*ActionOverride("%clean_ToB_DV%",SetDialogu?e?("[^"]+"))ActionOverride("%clean_ToB_DV%",ChangeAIScript("[^"]+",OVERRIDE))[%newline%]*MoveGlobal("AR4500","%clean_ToB_DV%",\[.+\])[%newline%]*ActionOverride("%clean_ToB_DV%",Face(.+))[%newline%]*ActionOverride("%clean_ToB_DV%",SetGlobal("BD_JOINXP","LOCALS",0))[%newline%]*ActionOverride("%clean_ToB_DV%",SetGlobal("KickedOut","LOCALS",0))[%newline%]*ActionOverride("%clean_ToB_DV%",SetNumTimesTalkedTo(0))[%newline%]*SetGlobal("[^"]+","GLOBAL",1)[%newline%]*END~ ~~
				END
			BUT_ONLY
			COPY_EXISTING ~FATESP.DLG~ ~override~
				DECOMPILE_AND_PATCH BEGIN
					REPLACE_TEXTUALLY ~IF .  Global("[^"]+","GLOBAL",0)[%newline%]*StateCheck("%clean_ToB_DV%",STATE_REALLY_DEAD)[%newline%]*. THEN REPLY #[0-9]+ DO .SetGlobal("[^"]+","GLOBAL",2)[%newline%]*. GOTO 10[%newline%]*  IF .  Global("[^"]+","GLOBAL",0)[%newline%]*Global("%clean_ToB_DV%PartyBG2","GLOBAL",0)[%newline%]*!StateCheck("%clean_ToB_DV%",STATE_REALLY_DEAD)[%newline%]*. THEN REPLY #[0-9]+ DO .SetGlobal("[^"]+","GLOBAL",2)[%newline%]*. GOTO 7[%newline%]*  IF .  Global("[^"]+","GLOBAL",0)[%newline%]*Global("%clean_ToB_DV%PartyBG2","GLOBAL",1)[%newline%]*!StateCheck("%clean_ToB_DV%",STATE_REALLY_DEAD)[%newline%]*. THEN REPLY #[0-9]+ DO .SetGlobal("[^"]+","GLOBAL",1)[%newline%]*. GOTO 9~ ~~
				END
			BUT_ONLY
		END

		// SummonedVar / SpawnPlaneVar
		ACTION_IF (~%SummonedVar%~ STRING_EQUAL_CASE ~~) BEGIN
			OUTER_SPRINT SummonedVar EVAL ~%dv%Summoned~
		END
		ACTION_IF (~%SpawnPlaneVar%~ STRING_EQUAL_CASE ~~) BEGIN
			OUTER_SPRINT SpawnPlaneVar EVAL ~%dv%SpawnPlane~
		END

		//Expand local scripts
<<<<<<<< .../chapterSoA-et.baf
IF
  !InPartyAllowDead(Myself)
  GlobalGT("CHAPTER","GLOBAL",19)
THEN
  RESPONSE #100
    DestroySelf()
END
>>>>>>>>

<<<<<<<< .../chapterSoD-et.baf
IF
  !InPartyAllowDead(Myself)
  GlobalGT("CHAPTER","GLOBAL",13)
THEN
  RESPONSE #100
    DestroySelf()
END
>>>>>>>>

<<<<<<<< .../chapterBG1-et.baf
IF
  !InPartyAllowDead(Myself)
  GlobalGT("CHAPTER","GLOBAL",7)
  Global("K#PartySoD","LOCALS",0)
THEN
  RESPONSE #100
    DestroySelf()
END
>>>>>>>>

<<<<<<<< .../party-et.baf
IF
  Global("%dv%PartyBG2","GLOBAL",0)
  InPartyAllowDead(Myself)
THEN
  RESPONSE #100
    SetGlobal("%dv%PartyBG2","GLOBAL",1)
    Continue()
END
>>>>>>>>

<<<<<<<< .../XP_ToB-eb.baf
IF
  Global("BD_JOINXP","LOCALS",0)
  InParty(Myself)
  XPLT(Myself,2500000)
THEN
  RESPONSE #100
    SetInterrupt(FALSE)
    SetGlobal("BD_JOINXP","LOCALS",1)
    ChangeStat(Myself,XP,2500000,SET)
    SetInterrupt(TRUE)
END
>>>>>>>>

		ACTION_IF (NOT ~%override_ToB%~ STRING_EQUAL_CASE ~~) BEGIN
			PRINT ~Patching %override_ToB%.BCS~
			ACTION_IF (FILE_CONTAINS_EVALUATED (~%override_ToB%.BCS~ ~"BD_JOINXP"~)) BEGIN
				PRINT ~%override_ToB%.BCS already patched.~
			END ELSE BEGIN
				EXTEND_BOTTOM ~%override_ToB%.BCS~ ~.../XP_ToB-eb.baf~ EVALUATE_BUFFER
			END
		END
		ACTION_IF (NOT ~%override_SoA%~ STRING_EQUAL_CASE ~~) BEGIN
			PRINT ~Patching %override_SoA%.BCS~
			ACTION_IF (FILE_CONTAINS_EVALUATED (~%override_SoA%.BCS~ ~IF[%newline%]*GlobalGT("CHAPTER","GLOBAL",[0-9]+)[%newline%]*!AreaCheck("AR4000")[%newline%]*THEN[%newline%]*RESPONSE #100[%newline%]*DestroySelf()[%newline%]*END~)) BEGIN
				PRINT ~%override_SoA%.BCS already patched.~
			END ELSE BEGIN
				EXTEND_TOP ~%override_SoA%.BCS~ ~.../chapterSoA-et.baf~ EVALUATE_BUFFER
				EXTEND_TOP ~%override_SoA%.BCS~ ~.../party-et.baf~ EVALUATE_BUFFER
			END
		END
		ACTION_IF (NOT ~%override_SoD%~ STRING_EQUAL_CASE ~~) BEGIN
			PRINT ~Patching %override_SoD%.BCS~
			ACTION_IF (FILE_CONTAINS_EVALUATED (~%override_SoD%.BCS~ ~IF[%newline%]*GlobalGT("CHAPTER","GLOBAL",[0-9]+)THEN[%newline%]*RESPONSE #100[%newline%]*DestroySelf()[%newline%]*END~)) BEGIN
				PRINT ~%override_SoD%.BCS already patched.~
			END ELSE BEGIN
				EXTEND_TOP ~%override_SoD%.BCS~ ~.../chapterSoD-et.baf~ EVALUATE_BUFFER
			END
		END
		ACTION_IF (NOT ~%override_BG1%~ STRING_EQUAL_CASE ~~) BEGIN
			PRINT ~Patching %override_BG1%.BCS~
			ACTION_IF (FILE_CONTAINS_EVALUATED (~%override_BG1%.BCS~ ~IF[%newline%]*GlobalGT("CHAPTER","GLOBAL",[0-9]+)[%newline%]*Global("K#PartySoD","LOCALS",0)[%newline%]*THEN[%newline%]*RESPONSE #100[%newline%]*DestroySelf()[%newline%]*END~)) BEGIN
				PRINT ~%override_BG1%.BCS already patched.~
			END ELSE BEGIN
				EXTEND_TOP ~%override_BG1%.BCS~ ~.../chapterBG1-et.baf~ EVALUATE_BUFFER
				ACTION_IF (~%override_SoD%~ STRING_EQUAL_CASE ~~) BEGIN
					EXTEND_TOP ~%override_BG1%.BCS~ ~.../chapterSoD-et.baf~ EVALUATE_BUFFER
				END
			END
		END

		//Expand FATESP.DLG
		ACTION_IF (NOT ~%string%~ STRING_CONTAINS_REGEXP ~^[^@#]~) BEGIN //not TRA or TLK reference
			OUTER_PATCH_SAVE string ~%string%~ BEGIN
				REPLACE_TEXTUALLY ~^~ "~"
				REPLACE_TEXTUALLY ~$~ "~"
			END
		END
		COPY_EXISTING ~FATESP.DLG~ ~override~
			DECOMPILE_AND_PATCH BEGIN
				COUNT_REGEXP_INSTANCES ~"%dv%"~ num_matches
			END
		BUT_ONLY
		ACTION_IF (num_matches > 0) BEGIN
			PRINT ~FATESP.DLG already has %dv% references. Patching not needed (unless some mod messed it up)~
		END ELSE BEGIN
			OUTER_SET match = 0
			ACTION_IF ((~%stringPosDV%~ STRING_EQUAL_CASE ~~)=0) BEGIN
				COPY_EXISTING - ~FATESP.DLG~ ~override~
					DECOMPILE_AND_PATCH BEGIN
						SPRINT tilde "~"
						SET match = 0
						SET position = 1 //first is already taken by exit response
						REPLACE_EVALUATE CASE_INSENSITIVE ~\(IF[ ]+.[%newline%]*Global("[^"]+","GLOBAL",0)[%newline%]*StateCheck("\)\([^"]+\)\(",STATE_REALLY_DEAD)\)~ BEGIN
							PATCH_IF (match = 0) BEGIN
								PATCH_IF (~%MATCH2%~ STRING_CONTAINS_REGEXP ~.*%stringPosDV%~) BEGIN
									SET position = position + 3
								END ELSE BEGIN
									SET match = 1
								END
							END
						END ~%MATCH1%%MATCH2%%MATCH3%~
					END
				BUT_ONLY
				ACTION_IF (match = 0) BEGIN
					WARN ~WARNING: %stringPosDV% position not found within FATESP.DLG~
				END ELSE BEGIN
<<<<<<<< .../FATESP-et.d
EXTEND_TOP FATESP 6 #%position%
  IF ~  Global("%SummonedVar%","GLOBAL",0)
StateCheck("%dv%",STATE_REALLY_DEAD)
~ THEN REPLY %string% DO ~SetGlobal("%SummonedVar%","GLOBAL",2)
~ GOTO 10
  IF ~  Global("%SummonedVar%","GLOBAL",0)
Global("%dv%PartyBG2","GLOBAL",0)
!StateCheck("%dv%",STATE_REALLY_DEAD)
~ THEN REPLY %string% DO ~SetGlobal("%SummonedVar%","GLOBAL",2)
~ GOTO 7
  IF ~  Global("%SummonedVar%","GLOBAL",0)
Global("%dv%PartyBG2","GLOBAL",1)
!StateCheck("%dv%",STATE_REALLY_DEAD)
~ THEN REPLY %string% DO ~SetGlobal("%SummonedVar%","GLOBAL",1)
~ GOTO 9
END
>>>>>>>>
					PRINT ~Patching FATESP.DLG: position %position%~
					COMPILE ~.../FATESP-et.d~ EVALUATE_BUFFER
				END
			END
			ACTION_IF (match = 0) BEGIN
<<<<<<<< .../FATESP-eb.d
EXTEND_BOTTOM FATESP 6
  IF ~  Global("%SummonedVar%","GLOBAL",0)
StateCheck("%dv%",STATE_REALLY_DEAD)
~ THEN REPLY %string% DO ~SetGlobal("%SummonedVar%","GLOBAL",2)
~ GOTO 10
  IF ~  Global("%SummonedVar%","GLOBAL",0)
Global("%dv%PartyBG2","GLOBAL",0)
!StateCheck("%dv%",STATE_REALLY_DEAD)
~ THEN REPLY %string% DO ~SetGlobal("%SummonedVar%","GLOBAL",2)
~ GOTO 7
  IF ~  Global("%SummonedVar%","GLOBAL",0)
Global("%dv%PartyBG2","GLOBAL",1)
!StateCheck("%dv%",STATE_REALLY_DEAD)
~ THEN REPLY %string% DO ~SetGlobal("%SummonedVar%","GLOBAL",1)
~ GOTO 9
END
>>>>>>>>
				PRINT ~Patching FATESP.DLG: EXTEND_BOTTOM~
				COMPILE ~.../FATESP-eb.d~ EVALUATE_BUFFER
				COPY_EXISTING ~FATESP.DLG~ ~override~
					DECOMPILE_AND_PATCH BEGIN
						REPLACE_TEXTUALLY ~IF[ ]+..[ ]+THEN[ ]+REPLY[ ]+#65029[ ]+DO[ ]+.SetGlobalTimer("FateSpiritTimer","AR4500",1)[%newline%]*.[ ]+GOTO 9~ ~~
					END
				BUT_ONLY
<<<<<<<< .../FATESP-eb.d
EXTEND_BOTTOM FATESP 6
  IF ~~ THEN REPLY #65029 DO ~SetGlobalTimer("FateSpiritTimer","AR4500",1)
~ GOTO 9
END
>>>>>>>>
				COMPILE ~.../FATESP-eb.d~ EVALUATE_BUFFER
			END
		END

		//Expand AR4000.BCS
		COPY_EXISTING ~AR4000.BCS~ ~override~
			DECOMPILE_AND_PATCH BEGIN
				PATCH_IF (default_ToB != 0) AND (type != 1) /*not BG1 NPC without BG2 content*/ BEGIN
					COUNT_REGEXP_INSTANCES ~SetGlobal("%dv%PartyBG2","GLOBAL",1)~ num_matches
					PATCH_IF (num_matches > 0) BEGIN
						PATCH_PRINT ~AR4000.BCS already has "%dv%PartyBG2" reference. Patching not needed~
					END ELSE BEGIN
						REPLACE_TEXTUALLY ~\(SetGlobal("NEWGAME_TOB","GLOBAL",1)\)~ ~SetGlobal("%dv%PartyBG2","GLOBAL",1)%LNL%\1~
					END
				END
				COUNT_REGEXP_INSTANCES ~SetGlobal("%SummonedVar%","GLOBAL",2)~ num_matches
				COUNT_REGEXP_INSTANCES ~BeenInParty("%dv%")~ num_matches2
			END
		BUT_ONLY
		ACTION_IF (num_matches > 0) BEGIN
			PRINT ~AR4000.BCS already has %SummonedVar% reference. Patching not needed (unless some mod messed it up)~
		END ELSE ACTION_IF (type != 1) /*not BG1 NPC without BG2 content*/ BEGIN
<<<<<<<< .../AR4000-eb1.baf
IF
  InPartyAllowDead("%dv%")
  Global("%SummonedVar%","GLOBAL",0)
THEN
  RESPONSE #100
    ActionOverride("%dv%",ChangeAIScript("%override_ToB%",OVERRIDE))
    SetGlobal("%SummonedVar%","GLOBAL",2)
END
>>>>>>>>
			PRINT ~Patching AR4000.BCS: %SummonedVar%~
			EXTEND_BOTTOM ~AR4000.BCS~ ~.../AR4000-eb1.baf~ EVALUATE_BUFFER
		END

		ACTION_IF (num_matches2 > 0) BEGIN
			PRINT ~AR4000.BCS already has BeenInParty("%dv%") reference. Patching not needed (unless some mod messed it up)~
		END ELSE BEGIN
<<<<<<<< .../AR4000-eb2.baf
IF
  Global("%SummonedVar%","GLOBAL",0)
  !BeenInParty("%dv%")
THEN
  RESPONSE #100
    SetGlobal("%SummonedVar%","GLOBAL",2)
    Continue()
END
>>>>>>>>
			PRINT ~Patching AR4000.BCS: %dv%Party~
			EXTEND_BOTTOM ~AR4000.BCS~ ~.../AR4000-eb2.baf~ EVALUATE_BUFFER
		END

		ACTION_IF (type != 1) BEGIN //not BG1 NPC without BG2 content
			//Expand AR4500.BCS
			COPY_EXISTING ~AR4500.BCS~ ~override~
				DECOMPILE_AND_PATCH BEGIN
					COUNT_REGEXP_INSTANCES ~MoveGlobal("AR4500","%dv%"~ num_matches
				END
			BUT_ONLY
			ACTION_IF (num_matches > 0) BEGIN
				PRINT ~AR4500.BCS already has MoveGlobal reference for %dv%. Patching not needed (unless some mod messed it up)~
			END ELSE BEGIN
<<<<<<<< .../AR4500-eb.baf
IF
  InPartyAllowDead("%dv%")
  Global("%SummonedVar%","GLOBAL",0)
THEN
  RESPONSE #100
    ActionOverride("%dv%",ChangeAIScript("%override_ToB%",OVERRIDE))
    SetGlobal("%SummonedVar%","GLOBAL",2)
END

IF
  Global("NEWGAME_TOB","GLOBAL",0)
  Global("%SummonedVar%","GLOBAL",1)
  Global("%SpawnPlaneVar%","GLOBAL",0)
THEN
  RESPONSE #100
    CreateVisualEffect("SPPORTAL",[1999.1218])
    Wait(2)
    ActionOverride("%dv%",SetDialog("%dialog_ToB%"))
    ActionOverride("%dv%",ChangeAIScript("%override_ToB%",OVERRIDE))
    MoveGlobal("AR4500","%dv%",[1999.1218])
    ActionOverride("%dv%",Face(S))
    ActionOverride("%dv%",SetGlobal("BD_JOINXP","LOCALS",0))
    ActionOverride("%dv%",SetGlobal("KickedOut","LOCALS",0))
    ActionOverride("%dv%",SetNumTimesTalkedTo(0))
    SetGlobal("%SpawnPlaneVar%","GLOBAL",1)
END
>>>>>>>>
				PRINT ~Patching AR4500.BCS~
				EXTEND_BOTTOM ~AR4500.BCS~ ~.../AR4500-eb.baf~ EVALUATE_BUFFER
			END
		END
	END
END
